package main

import (
	"fmt"
	"log"
	"strconv"

	Internal "github.com/DYankee/RRipper/internal"
	"github.com/charmbracelet/bubbles/table"
	"github.com/charmbracelet/bubbles/textinput"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

var (
	focusedStyle        = lipgloss.NewStyle().Foreground(lipgloss.Color("205"))
	blurredStyle        = lipgloss.NewStyle().Foreground(lipgloss.Color("240"))
	cursorStyle         = focusedStyle
	noStyle             = lipgloss.NewStyle()
	helpStyle           = blurredStyle
	cursorModeHelpStyle = lipgloss.NewStyle().Foreground(lipgloss.Color("244"))

	focusedButton = focusedStyle.Render("[ Submit ]")
	blurredButton = fmt.Sprintf("[ %s ]", blurredStyle.Render("Submit"))
)

type Style struct {
	BorderColor lipgloss.Color
	InputField  lipgloss.Style
	table       lipgloss.Style
}

var tableStyle = lipgloss.NewStyle().BorderStyle(lipgloss.NormalBorder()).BorderForeground(lipgloss.Color("240"))

func DefaultStyles() *Style {
	s := new(Style)
	s.BorderColor = lipgloss.Color("36")
	s.InputField = lipgloss.NewStyle().BorderForeground(s.BorderColor).BorderStyle(lipgloss.NormalBorder()).Padding(1).Width(80)
	return s
}

type Question struct {
	question string
	answer   string
}

func NewQuestion(q string) Question {
	return Question{question: q}
}

type view struct {
	Name   string
	IndexX int
	IndexY int
	Style  lipgloss.Style
	View   string
}

func newView(name string, layout string) *view {
	return &view{
		Name:   name,
		IndexX: 0,
		IndexY: 0,
		View:   layout,
	}
}

type model struct {
	views       []view
	currentView *view
	viewIndex   int
	Styles      *Style
	width       int
	height      int
	inputs      []textinput.Model
	querry      Internal.ReleaseQuerry
	searchRes   table.Model
	answerField textinput.Model
	audacity    Internal.Audacity
	musicBrainz Internal.MusicBrainz
}

func New() *model {
	Styles := DefaultStyles()
	answerField := textinput.New()
	answerField.Focus()
	mb := Internal.MusicBrainz{}
	mb.Init()

	m := model{
		currentView: newView("loading", "loading..."),
		inputs:      make([]textinput.Model, 2),
		answerField: answerField,
		Styles:      Styles,
		querry:      Internal.ReleaseQuerry{},
		musicBrainz: mb,
		audacity:    Internal.Audacity{},
	}

	var t textinput.Model
	for i := range m.inputs {
		t = textinput.New()
		t.Cursor.Style = cursorStyle
		t.CharLimit = 32

		switch i {
		case 0:
			t.Placeholder = "Artist"
			t.Focus()
			t.PromptStyle = focusedStyle
			t.TextStyle = focusedStyle
		case 1:
			t.Placeholder = "Release"
			t.CharLimit = 64

		m.inputs[i] = t
	}

	return &m
}

func (m model) Init() tea.Cmd {
	return nil
}

// update function
func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	var cmd tea.Cmd
	current := &m.searchfields[m.currentView.IndexY]

	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		m.width = msg.Width
		m.height = msg.Height
	case tea.KeyMsg:
		if msg.String() == "ctrl+c" {
			return m, tea.Quit
		}
		switch m.currentView.Name {
		case "loading":
			m.changeView()
		case "main":
			switch msg.String() {
			case "enter":
				m.changeView()
				return m, nil
			}
		case "search":
			switch msg.String() {
			case "ctrl+c":
				return m, tea.Quit
			case "enter":
				return m.nextInput()
			}
		case "result":
			switch msg.String() {
			case "enter":
				m.changeView()
				return m, nil
			}
		}
	}
	m.answerField, cmd = m.answerField.Update(msg)
	return m, cmd
}

// update helper functions
func (m *model) Next() {
	if m.currentView.IndexY < len(m.searchfields)-1 {
		m.currentView.IndexY++
	} else {
		m.currentView.IndexY = 0
		m.querry.Artist = m.searchfields[0].answer
		m.querry.Album = m.searchfields[1].answer
		m.querry.Format = "12vinyl"
		log.Printf("Artist: %s, Release: %s, Format: %s", m.querry.Artist, m.querry.Album, m.querry.Format)
		m.musicBrainz.SearchRelease(&m.querry)
		m.musicBrainz.GetReleaseData(0)
		m.FormatTable()
	}
}

func (m *model) nextInput() (model, tea.Cmd){
	s := msg.String()

			// Did the user press enter while the submit button was focused?
			// If so, exit.
			if s == "enter" && m.focusIndex == len(m.inputs) {
				return m, tea.Quit
			}

			// Cycle indexes
			if s == "up" || s == "shift+tab" {
				m.focusIndex--
			} else {
				m.focusIndex++
			}

			if m.focusIndex > len(m.inputs) {
				m.focusIndex = 0
			} else if m.focusIndex < 0 {
				m.focusIndex = len(m.inputs)
			}

			cmds := make([]tea.Cmd, len(m.inputs))
			for i := 0; i <= len(m.inputs)-1; i++ {
				if i == m.focusIndex {
					// Set focused state
					cmds[i] = m.inputs[i].Focus()
					m.inputs[i].PromptStyle = focusedStyle
					m.inputs[i].TextStyle = focusedStyle
					continue
				}
				// Remove focused state
				m.inputs[i].Blur()
				m.inputs[i].PromptStyle = noStyle
				m.inputs[i].TextStyle = noStyle
			}

			return m, tea.Batch(cmds...)
}

func (m *model) FormatTable() {
	resData := m.musicBrainz.ReleaseData.Mediums[0].Tracks
	colums := []table.Column{
		{Title: "#", Width: 5},
		{Title: "Track", Width: 30},
		{Title: "Length", Width: 10},
	}

	//build rows
	rows := []table.Row{
		{strconv.Itoa(resData[0].Position), resData[0].Recording.Title, strconv.Itoa(resData[0].Length)},
		{strconv.Itoa(resData[1].Position), resData[1].Recording.Title, strconv.Itoa(resData[1].Length)},
		{strconv.Itoa(resData[2].Position), resData[2].Recording.Title, strconv.Itoa(resData[2].Length)},
		{strconv.Itoa(resData[3].Position), resData[3].Recording.Title, strconv.Itoa(resData[3].Length)},
	}
	t := table.New(
		table.WithColumns(colums),
		table.WithRows(rows),
	)
	m.searchRes = t
	log.Printf("%s, %s", rows[0][0], rows[0][1])
}

// view function
func (m model) View() string {
	if m.width == 0 {
		return "Loading..."
	}
	return m.currentView.View
}

// view helper func
func (m *model) mainView() string {
	return lipgloss.Place(
		m.width,
		m.height,
		lipgloss.Center,
		lipgloss.Center,

		lipgloss.JoinVertical(
			lipgloss.Center,
			lipgloss.JoinHorizontal(
				lipgloss.Center,
				m.searchfields[0].question,
				m.searchfields[0].answer,
			),
			lipgloss.JoinHorizontal(
				lipgloss.Center,
				m.searchfields[1].question,
				m.searchfields[1].answer,
			),
		),
	)
}

func (m *model) inputView() string {
	return lipgloss.Place(
		m.width,
		m.height,
		lipgloss.Center,
		lipgloss.Center,

		lipgloss.JoinVertical(
			lipgloss.Center,
			m.searchfields[m.currentView.IndexY].question,
			m.Styles.InputField.Render(m.answerField.View()),
		),
	)
}

func (m *model) resultView() string {
	return lipgloss.Place(
		m.width,
		m.height,
		lipgloss.Center,
		lipgloss.Center,
		m.searchRes.View(),
	)
}

func (m *model) changeView() {
	if m.currentView.Name == "loading" {
		m.viewIndex = 0
		m.currentView = &m.views[m.viewIndex]
	} else {
		switch m.viewIndex {
		case 0:
			m.viewIndex = 1
			m.currentView = &m.views[m.viewIndex]
		case 1:
			m.viewIndex = 2
			m.currentView = &m.views[m.viewIndex]
		case 2:
			m.viewIndex = 0
			m.currentView = &m.views[m.viewIndex]
		}
	}
}

func main() {

	questions := []Question{
		NewQuestion("Artist Name: "),
		NewQuestion("Release Name: "),
	}
	m := New(questions)
	m.views = []view{
		*newView("main", m.mainView()),
		*newView("search", m.inputView()),
		*newView("result", m.resultView()),
	}

	f, err := tea.LogToFile("debug.log", "debug")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	p := tea.NewProgram(m, tea.WithAltScreen())
	if _, err := p.Run(); err != nil {
		log.Fatal(err)
	}
}
